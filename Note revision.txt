Class and Objects:
	class_name obj_name = new class_constructor();

Inheritance:  One class to another ---> extends.

1. Single  

	A ---> B
	
2. Multi-level	

	A --> B --> C extends B

3. Multiple  --> we use interface

	A interface     B interface

	   C   --> C implements A,B
	
4. Hybrid - Combination of Multiple and Hierarchical
5. Hierarchical  - One parent class and 2 child

Interface: unimplemented methods 
	void add(); ----> abstract method. 

Class --> abstract void add();
	Abstract class --> atleast one abstract method. 

Method overloading : same method name different parameter list/different data type.
Method overriding: same method name same parameter list. 

Class B {

	methodA(int a,int b){ int c = a+b; }
	methodB(){ }
	methodA(int a,float b)
	

}

Class C extends B {
	
	methodA(int a,int b){ int c = a+b; }
	methodC(){ }

}

Encapsulation: Getter and setter 

setter --> assign the vale
getter --> return the value


What why where 


Loops:
	for
	while
	do while

for:

syntax:
	for(intialization; condition; increment/decrement) {

		}

Example: 
Print 1 to 10:

	for(int i=1; i <= 10; i++) {

		 System.out.println(i);
	}


while:

syntax:
	while(condition){
	
	}

Example: 
Print 1 to 10:
	
	int i=1;
	while(i <= 10){
		System.out.println(i);
		i++;
	}

do while:

syntax:
	do { 

	} while(condition);

Example: 
Print 1 to 10:

	int i=1;
	do{ 
	System.out.println(i);
	i++;
	} while(i <= 10);


Array:

int a;
int b;
int c;
int d;

int[] arr = new int[5];

arr[0]=10;
arr[1]=20;
arr[2]=30;
arr[3]=40;
arr[4]=50;

To print an array:

1. Using for each
for(int num : arr){
	sysout(num);
}

2. for loop

	for(int i=0; i<=arr.length;i++){
		sysout(arr[i]);
	}


Exception and Try catch:

try {
	statement to be executed
} catch(Exception e){

	fix for the exception

} catch () 

public void add() throws IOException{

	throw new IOException
	
}

throw -> 

